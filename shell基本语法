!/bin/bash

dirname $0，获取当前Shell程序的路径 

echo it is a test等价于echo "it is a test"

显示转义字符

echo \"it is a test\"

echo "Hello World !"

myurl="http://www.baidu.com"

设置变量为只读变量

readonly myurl

echo $myurl

删除变量

unset myurl

echo $myurl

变量赋值

your_name="张帆"

str="Hello, I know you are \"$your_name\"! \n"

获取变量值

echo -e $str 

单引号原样输出里面的内容

echo '123,'456''

获取字符串长度

echo ${#your_name}

使用双引号拼接字符串

echo "hello,"$your_name""

echo "hello,$your_name"

显示结果：

hello,张帆

hello,张帆

使用单引号拼接字符串

echo 'hello,'$your_name''

echo 'hello,$your_name'

显示结果：

hello,张帆

hello,$your_name

查找字符串

查找字符张的位置(哪个字母先出现就计算哪个)：

echo expr index "$your_name" 张

获取数组中所有元素

echo ${arr_name[@]}

echo ${arr_name[*]}

获取数组中元素个数

echo ${#arr_name[@]}

echo ${#arr_name[*]}

取得数组中单个元素的长度

echo ${#arr_name[0]}

read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量

read name

输入张帆

echo my name is $name

显示:my name is 张帆

显示换行,-e开启转义

echo -e "ok! \n" 

显示不换行，-e开启转义 \c不换行

显示结果定向至文件

echo it is a test >文件名

显示当前日期

echo date

f-string写法

printf "%s %s %s" '1','2','3'

format-string为双引号

printf "%d %s\n" 1 "abc"

单引号与双引号效果一样

printf '%d %s\n' 1 "abc"

没有引号也可以输出

printf %s abcdef

格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用

printf %s abc def

printf "%s\n" abc def

printf "%s %s %s\n" a b c d e f g h i j

如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替

printf "%s and %d \n"

:<<EOF

判断数值(test语法)

参数			说明

-eq			等于则为真

-ne			不等于则为真

-gt			大于则为真

-ge			大于等于则为真

-lt			小于则为真

-le			小于等于则为真

EOF

注意：流程控制语句[ condition ] '[]'中的表达式前后与'[]'之间要加空格！！！！(重要)

num1=100

num2=100

if test $[ num1 -eq $num2 ]

then

    echo '两个数相等！'

else

    echo '两个数不相等！'

fi

判断字符串

=		等于则为真

!=		不相等则为真

-z 字符串	字符串的长度为零则为真

-n 字符串	字符串的长度不为零则为真

shell流程控制

和 Java、PHP 等语言不一样，sh 的流程控制不可为空

if

  xxxx

else

  xxxx

fi

if

  xxxx

then

  xxxx

elif

  xxxx

then

  xxxx

else

  xxxx

for xx in x x x x

do 

  xx

done

while xxx

do

   xxx

done

c=5

while(($c<=10))

do

echo $c

let "c++"

done

case ... esac 为多选择语句，与其他语言中的 switch ... case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 ;; 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。

可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。

case ... esac 语法格式如下：

case 值 in

模式1)

    command1

    command2

    ...

    commandN

    ;;

模式2）

    command1

    command2

    ...

    commandN

    ;;

esac

echo "请输入数字:"

read aNum

case $aNum in 

1) echo 你输入了数字1;;

2) echo 你输入了数字2;;

3) echo 你输入了数字3;;

esac

linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。

函数返回值在调用该函数后通过 $? 来获得。

$? 仅对其上一条指令负责，一旦函数返回后其返回值没有立即保存入参数，那么其返回值将不再能通过 $? 获得。

shell中函数的定义格式如下：

[ function ] funname [()]

{

    action;
    
    [return int;]

}

demoFun(){

    echo "这是我的第一个 shell 函数!"

}

echo "-----函数开始执行-----"

demoFun

echo "-----函数执行完毕-----"

demofun(){

	a=1

	b=2

	return $(($a+$b))

}

demofun

echo 和为:$?

函数参数

demofun(){

	echo 第一个参数为:$1 !

	echo 第一个参数为:$2 !

	echo 第一个参数为:$3 !

	echo 第一个参数为:$4 !

	echo 第一个参数为:$5 !

}

demofun 1 2 3 4 5

函数与命令的执行结果可以作为条件语句使用。要注意的是，和 C 语言不同，shell 语言中 0 代表 true，0 以外的值代表 false。

Shell 输入/输出重定向

command > file		将输出重定向到 file。

command < file		将输入重定向到 file。

command >> file		将输出以追加的方式重定向到 file。

n > file		将文件描述符为 n 的文件重定向到 file。

n >> file		将文件描述符为 n 的文件以追加的方式重定向到 file。

n >& m			将输出文件 m 和 n 合并。

n <& m			将输入文件 m 和 n 合并。

<< tag			将开始标记 tag 和结束标记 tag 之间的内容作为输入。

/dev/null 文件

如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：

系统文件参数

command > /dev/null 2>&1

注意：0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。

这里的 2 和 > 之间不可以有空格，2> 是一体的时候才表示错误输出。

[ -a FILE ]  如果 FILE 存在则为真。  

[ -b FILE ]  如果 FILE 存在且是一个块特殊文件则为真。  

[ -c FILE ]  如果 FILE 存在且是一个字特殊文件则为真。  

[ -d FILE ]  如果 FILE 存在且是一个目录则为真。  

[ -e FILE ]  如果 FILE 存在则为真。  

[ -f FILE ]  如果 FILE 存在且是一个普通文件则为真。  

[ -g FILE ]  如果 FILE 存在且已经设置了SGID则为真。  

[ -h FILE ]  如果 FILE 存在且是一个符号连接则为真。  

[ -k FILE ]  如果 FILE 存在且已经设置了粘制位则为真。  

[ -p FILE ]  如果 FILE 存在且是一个名字管道(F如果O)则为真。  

[ -r FILE ]  如果 FILE 存在且是可读的则为真。  

[ -s FILE ]  如果 FILE 存在且大小不为0则为真。  

[ -t FD ]  如果文件描述符 FD 打开且指向一个终端则为真。  

[ -u FILE ]  如果 FILE 存在且设置了SUID (set user ID)则为真。  

[ -w FILE ]  如果 FILE 如果 FILE 存在且是可写的则为真。  

[ -x FILE ]  如果 FILE 存在且是可执行的则为真。  

[ -O FILE ]  如果 FILE 存在且属有效用户ID则为真。  

[ -G FILE ]  如果 FILE 存在且属有效用户组则为真。  

[ -L FILE ]  如果 FILE 存在且是一个符号连接则为真。  

[ -N FILE ]  如果 FILE 存在 and has been mod如果ied since it was last read则为真。  

[ -S FILE ]  如果 FILE 存在且是一个套接字则为真。  

[ FILE1 -nt FILE2 ]  如果 FILE1 has been changed more recently than FILE2, or 如果 FILE1 exists and FILE2 does not则为真。  

[ FILE1 -ot FILE2 ]  如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真。  

[ FILE1 -ef FILE2 ]  如果 FILE1 和 FILE2 指向相同的设备和节点号则为真。  

[ -o OPTIONNAME ]  如果 shell选项 “OPTIONNAME” 开启则为真。  

[ -z STRING ]  “STRING” 的长度为零则为真。 字符串为空即NULL时为真。 

[ -n STRING ] or [ STRING ]  “STRING” 的长度为非零 non-zero则为真。加-n与不加-n结果相同。  

[ STRING1 == STRING2 ]  如果2个字符串相同。 “=” may be used instead of “==” for strict POSIX compliance则为真。  

[ STRING1 != STRING2 ]  如果字符串不相等则为真。 

[ STRING1 < STRING2 ]  如果 “STRING1” sorts before “STRING2” lexicographically in the current locale则为真。  

[ STRING1 > STRING2 ]  如果 “STRING1” sorts after “STRING2” lexicographically in the current locale则为真。  

文件夹不存在则创建

if [ ! -d "/data/" ];then

  mkdir /data

else

  echo "文件夹已经存在"

fi

文件存在则删除

if [ ! -f "/data/filename" ];then

  echo "文件不存在"

else

  rm -f /data/filename

fi

判断文件夹是否存在

if [ -d "/data/" ];then

  echo "文件夹存在"

else

  echo "文件夹不存在"

fi

判断文件是否存在

if [ -f "/data/filename" ];then

  echo "文件存在"

else

  echo "文件不存在"

fi

Linux sed 命令是利用脚本来处理文本文件。

sed 可依照脚本的指令来处理、编辑文本文件。

Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。



set -x介绍

用于脚本调试，在liunx脚本中可用set -x就可有详细的日志输出.免的老是要echo了



mkfifo

    mkfifo $tmp_fifofile      # 新建一个fifo类型的文件
    exec 6<>$tmp_fifofile     #这里的数字6指的是管道6,可以指定任意数字,这儿的$符只是文件名
    # 将fd6指向fifo类型，如果没有这句，在向文件$tmp_fifofile或者&6写入数据时，程序会被阻塞，直到有read读出了管道中的数据位置，
    而执行了上述之后，可以在程序运行期间不断向fifo类型文件写入数据而不会阻塞，并且数据会被保存下来以供read程序读出。

注意：在进行#或##匹配时，$string的首字符必须是被删除子串$substring的第一个字符，不然无法匹配删除； 

在进行%或者%%匹配时，$string的最后一个字符必须是被删除子串$substring的最后一个字符，不然无法进行删除操作；

    ${parameter/parttern/string} 
    
    用string来替换第一个匹配的pattern
    
    ${parameter/#parttern/string} 
    
    从开头匹配parameter变量中的pattern，匹配上后就用string来替换匹配的pattern
    
    ${parameter/%pattern/string} 
    
    从结尾开始匹配parameter变量中的pattern，匹配上后就用string替换匹配的pattern
    
    ${parameter//pattern/string} 
    
    用string来替换parameter变量中所有匹配的pattern


